#!/bin/bash

# build - Docker image builder for Whisper Transcription Service
# This script builds and manages Docker images for the Whisper Transcription Service

# Text formatting
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to display help message
show_help() {
    echo -e "${BOLD}Whisper Transcription Service - Build Tool${NC}\n"
    echo -e "Usage: ./build [OPTIONS]"
    echo -e "\nOptions:"
    echo -e "  --help         Display this help message"
    echo -e "  --clean        Build from clean (deletes .env file and rebuilds)"
    echo -e "  --cleandocker  Remove old Docker images related to this project"
    echo -e "  --deploy       Build and deploy using docker compose"
    echo -e "\nExamples:"
    echo -e "  ./build                   # Show this help message"
    echo -e "  ./build --clean           # Clean build"
    echo -e "  ./build --cleandocker     # Clean Docker images"
    echo -e "  ./build --deploy          # Build and deploy"
    echo -e "  ./build --clean --deploy  # Clean build and deploy"
}

# Function to build the Docker image
build_image() {
    # Check if .env file exists
    if [[ ! -f .env ]]; then
        echo -e "${RED}Error: .env file not found.${NC}"
        echo -e "Please run the configure.sh script first to set up your configuration."
        echo -e "   ${BOLD}./configure.sh${NC}"
        exit 1
    fi

    # Source the .env file to get the configuration
    source .env

    # Determine which Dockerfile to use based on TRANSCRIPTION_MODE
    if [[ "$TRANSCRIPTION_MODE" == "api" ]]; then
        DOCKERFILE="Dockerfile.api"
        COMPOSE_FILE="docker-compose.api.yml"
        echo -e "${BLUE}Building API-based image using $DOCKERFILE${NC}"
    else
        DOCKERFILE="Dockerfile"
        COMPOSE_FILE="docker-compose.yml"
        echo -e "${BLUE}Building local compute image using $DOCKERFILE${NC}"
    fi

    # Build the Docker image
    echo -e "\n${BOLD}Building Docker image...${NC}"
    if docker build -t whisper-service:$TRANSCRIPTION_MODE -f $DOCKERFILE .; then
        echo -e "\n${GREEN}Docker image built successfully!${NC}"
        
        # Tag the image as latest for the selected mode
        docker tag whisper-service:$TRANSCRIPTION_MODE whisper-service:latest
        echo -e "${GREEN}Tagged image as whisper-service:latest${NC}"
        
        # Display image information
        echo -e "\n${BOLD}Docker image details:${NC}"
        docker images | grep whisper-service
        
        return 0
    else
        echo -e "\n${RED}Error: Docker image build failed.${NC}"
        echo -e "Please check the error messages above and try again."
        return 1
    fi
}

# Function to clean build (delete .env and rebuild)
clean_build() {
    echo -e "${YELLOW}Performing clean build...${NC}"
    echo -e "${YELLOW}Removing .env file...${NC}"
    rm -f .env
    
    echo -e "${YELLOW}Running configure script...${NC}"
    ./configure.sh
    
    # Check if configure.sh was successful
    if [[ $? -ne 0 ]]; then
        echo -e "${RED}Configuration failed. Aborting build.${NC}"
        exit 1
    fi
    
    # Build the image
    build_image
}

# Function to clean Docker images
clean_docker() {
    echo -e "${YELLOW}Cleaning Docker images related to whisper-service...${NC}"
    
    # First, stop any running containers
    echo -e "${YELLOW}Stopping any running containers...${NC}"
    
    # Check if .env file exists to determine which compose file to use
    if [[ -f .env ]]; then
        source .env
        if [[ "$TRANSCRIPTION_MODE" == "api" ]]; then
            COMPOSE_FILE="docker-compose.api.yml"
        else
            COMPOSE_FILE="docker-compose.yml"
        fi
        
        echo -e "${YELLOW}Using $COMPOSE_FILE to stop containers...${NC}"
        docker compose -f $COMPOSE_FILE down
    else
        # If no .env file, try both compose files to be thorough
        echo -e "${YELLOW}No .env file found. Trying both compose files...${NC}"
        docker compose -f docker-compose.yml down 2>/dev/null
        docker compose -f docker-compose.api.yml down 2>/dev/null
    fi
    
    # Force remove any remaining containers with whisper-service in their name
    CONTAINERS=$(docker ps -a | grep whisper-service | awk '{print $1}')
    if [[ ! -z "$CONTAINERS" ]]; then
        echo -e "${YELLOW}Force removing any remaining whisper-service containers...${NC}"
        docker rm -f $(docker ps -a | grep whisper-service | awk '{print $1}') 2>/dev/null
    fi
    
    # Get list of whisper-service images
    IMAGES=$(docker images | grep whisper-service | awk '{print $1":"$2}')
    
    if [[ -z "$IMAGES" ]]; then
        echo -e "${BLUE}No whisper-service images found.${NC}"
    else
        echo -e "${YELLOW}Found the following images to remove:${NC}"
        docker images | grep whisper-service
        
        echo -e "${YELLOW}Removing images...${NC}"
        docker rmi -f $(docker images | grep whisper-service | awk '{print $3}') 2>/dev/null
        
        if [[ $? -eq 0 ]]; then
            echo -e "${GREEN}Successfully removed whisper-service images.${NC}"
        else
            echo -e "${RED}Error removing some images.${NC}"
            echo -e "${YELLOW}Attempting force removal...${NC}"
            docker rmi -f $(docker images | grep whisper-service | awk '{print $3}') 2>/dev/null
            
            # Check if any images remain
            REMAINING=$(docker images | grep whisper-service)
            if [[ -z "$REMAINING" ]]; then
                echo -e "${GREEN}Successfully removed all whisper-service images.${NC}"
            else
                echo -e "${RED}Some images could not be removed. They may be referenced by other images.${NC}"
                echo -e "${YELLOW}Remaining images:${NC}"
                docker images | grep whisper-service
            fi
        fi
    fi
}

# Function to deploy using docker compose
deploy() {
    # Check if .env file exists
    if [[ ! -f .env ]]; then
        echo -e "${RED}Error: .env file not found.${NC}"
        echo -e "Please run the configure.sh script first or use --clean option."
        exit 1
    fi
    
    # Source the .env file to get the configuration
    source .env
    
    # Determine which compose file to use
    if [[ "$TRANSCRIPTION_MODE" == "api" ]]; then
        COMPOSE_FILE="docker-compose.api.yml"
    else
        COMPOSE_FILE="docker-compose.yml"
    fi
    
    # Check if Docker daemon is running properly
    echo -e "${YELLOW}Checking Docker daemon status...${NC}"
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Error: Docker daemon is not running or is not accessible.${NC}"
        echo -e "Please check that Docker is running with: systemctl status docker"
        echo -e "You may need to restart Docker with: sudo systemctl restart docker"
        exit 1
    fi
    
    echo -e "${BLUE}Deploying service using $COMPOSE_FILE...${NC}"
    
    # Stop any running containers first
    echo -e "${YELLOW}Stopping any running containers...${NC}"
    docker compose -f $COMPOSE_FILE down
    
    # Start the service
    echo -e "${YELLOW}Starting the service...${NC}"
    
    # Simple deployment
    if docker compose -f $COMPOSE_FILE up -d; then
        echo -e "\n${GREEN}Service deployed successfully!${NC}"
        echo -e "Access the service at http://localhost:9673"
    else
        echo -e "\n${RED}Error: Service deployment failed.${NC}"
        echo -e "${YELLOW}Troubleshooting suggestions:${NC}"
        echo -e "1. Check Docker daemon status: ${BOLD}systemctl status docker${NC}"
        echo -e "2. Try running with --cleandocker first: ${BOLD}./build --cleandocker${NC}"
        echo -e "3. Then try again with: ${BOLD}./build --deploy${NC}"
        exit 1
    fi
}

# Main script logic
# If no arguments provided, show help
if [[ $# -eq 0 ]]; then
    show_help
    exit 0
fi

# Process command line arguments
CLEAN=false
CLEAN_DOCKER=false
DEPLOY=false

for arg in "$@"; do
    case $arg in
        --help)
            show_help
            exit 0
            ;;
        --clean)
            CLEAN=true
            ;;
        --cleandocker)
            CLEAN_DOCKER=true
            ;;
        --deploy)
            DEPLOY=true
            ;;
        *)
            echo -e "${RED}Unknown option: $arg${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Execute requested operations
if [[ "$CLEAN_DOCKER" == "true" ]]; then
    clean_docker
fi

# Determine if we should build
BUILD_NEEDED=true

# Don't build if only cleandocker was specified
if [[ "$CLEAN_DOCKER" == "true" && "$CLEAN" == "false" && "$DEPLOY" == "false" ]]; then
    BUILD_NEEDED=false
fi

if [[ "$CLEAN" == "true" ]]; then
    clean_build
    BUILD_NEEDED=false  # clean_build already includes building
elif [[ "$DEPLOY" != "true" && "$BUILD_NEEDED" == "true" ]]; then
    # Only build if not cleaning, not just deploying, and build is needed
    echo -e "${BOLD}Whisper Transcription Service - Docker Image Builder${NC}\n"
    build_image
fi

if [[ "$DEPLOY" == "true" ]]; then
    deploy
fi

exit 0
