#!/bin/bash

# configure.sh - Configuration script for Whisper Transcription Service
# This script allows users to choose between local compute or OpenAI API for transcription

# Text formatting
BOLD='\033[1m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BOLD}Whisper Transcription Service Configuration${NC}\n"
echo -e "This script will help you configure the Whisper Transcription Service."
echo -e "You can choose between using local compute or OpenAI's Whisper API for transcription.\n"

# Function to validate OpenAI API key
validate_api_key() {
    local api_key=$1
    if [[ -z "$api_key" ]]; then
        echo -e "${RED}Error: API key cannot be empty.${NC}"
        return 1
    fi
    
    # Basic format validation (simple check for typical length and format)
    # Accept both traditional format (sk-...) and project-based format (sk-proj-...)
    if [[ ! $api_key =~ ^sk-(proj-)?[A-Za-z0-9-_]{32,}$ ]]; then
        echo -e "${RED}Warning: API key format doesn't appear to be valid. OpenAI API keys typically start with 'sk-' followed by a long string of characters.${NC}"
        echo -e "Do you want to continue anyway? (y/n)"
        read -r continue_anyway
        if [[ "$continue_anyway" != "y" && "$continue_anyway" != "Y" ]]; then
            return 1
        fi
    fi
    
    return 0
}

# Function to create .env file
create_env_file() {
    local mode=$1
    local api_key=$2
    
    echo "# Whisper Transcription Service Environment Variables" > .env
    echo "# Generated by configure.sh on $(date)" >> .env
    echo "TRANSCRIPTION_MODE=$mode" >> .env
    
    # Add UID and GID for Docker
    echo "UID=$(id -u)" >> .env
    echo "GID=$(id -g)" >> .env
    
    # Add API key if in API mode
    if [[ "$mode" == "api" ]]; then
        echo "OPENAI_API_KEY=$api_key" >> .env
    fi
    
    echo -e "${GREEN}Configuration saved to .env file.${NC}"
}

# Main configuration options
echo -e "${BOLD}Select transcription mode:${NC}"
echo "1) Local compute (uses GPU if available, requires more resources)"
echo "2) OpenAI API (requires API key, less resource intensive)"
echo -e "Enter your choice (1 or 2): "
read -r choice

case $choice in
    1)
        echo -e "\n${BLUE}Selected: Local compute mode${NC}"
        echo -e "This mode will use the local Whisper model for transcription."
        echo -e "It requires more computational resources but doesn't need an API key."
        echo -e "If a GPU is available, it will be used for faster processing.\n"
        
        create_env_file "local" ""
        
        echo -e "${GREEN}Configuration complete!${NC}"
        echo -e "To start the service, run: ${BOLD}docker compose up -d${NC}"
        ;;
        
    2)
        echo -e "\n${BLUE}Selected: OpenAI API mode${NC}"
        echo -e "This mode will use OpenAI's Whisper API for transcription."
        echo -e "It requires an OpenAI API key but uses fewer local resources.\n"
        
        # Get API key
        echo -e "Enter your OpenAI API key: "
        read -r api_key
        
        # Validate API key
        while ! validate_api_key "$api_key"; do
            echo -e "Enter your OpenAI API key (or press Ctrl+C to cancel): "
            read -r api_key
        done
        
        create_env_file "api" "$api_key"
        
        echo -e "${GREEN}Configuration complete!${NC}"
        echo -e "To start the service, run: ${BOLD}docker compose -f docker-compose.api.yml up -d${NC}"
        ;;
        
    *)
        echo -e "${RED}Invalid choice. Please run the script again and select 1 or 2.${NC}"
        exit 1
        ;;
esac

# Provide instructions for building the Docker image
echo -e "\n${BOLD}Next steps:${NC}"
echo -e "1. Build the Docker image using the build-image.sh script:"
echo -e "   ${BOLD}./build-image.sh${NC}"
echo -e "2. Start the service using the appropriate docker compose command as shown above."
echo -e "3. Access the service at http://localhost:9673"
